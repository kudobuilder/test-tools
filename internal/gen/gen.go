package main

import (
	"flag"
	"fmt"
	"os"
	"strings"
	"text/template"
)

//nolint:lll
const stubTemplate = `package kubernetes

// Code generated by gen.go DO NOT EDIT.

import ({{ if eq .API "CoreV1" }}
	corev1 "k8s.io/api/core/v1"{{ else  if eq .API "AppsV1" }}
	appsv1 "k8s.io/api/apps/v1"{{ end }}
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"github.com/kudobuilder/test-tools/pkg/client"
)


// {{ .Type }} wraps a Kubernetes {{ .Type }}.
type {{ .Type }} struct {
	{{ .API | toLower }}.{{ .Type }}

	client client.Client
}

// New{{ .Type }} creates a {{ .Type }} from its Kubernetes {{ .Type }}.
func New{{ .Type }}(client client.Client, {{ .Type | toLower }} {{ .API | toLower }}.{{ .Type }}) ({{ .Type }}, error) {
	created{{ .Type }}, err := client.Kubernetes.
		{{ .API }}().
		{{ .Type }}s({{ .Type | toLower }}.Namespace).
		Create(&{{ .Type | toLower }})
	if err != nil {
		return {{ .Type }}{}, err
	}

	return {{ .Type }}{
		{{ .Type }}:    *created{{ .Type }},
		client: client,
	}, nil
}

// Get{{ .Type }} gets a {{ .Type | toLower }} in a namespace.
func Get{{ .Type }}(client client.Client, name string, namespace string) ({{ .Type }}, error) {
	options := metav1.GetOptions{}

	{{ .Type | toLower }}, err := client.Kubernetes.
		{{ .API }}().
		{{ .Type }}s(namespace).
		Get(name, options)
	if err != nil {
		return {{ .Type }}{}, err
	}

	return {{ .Type }}{
		{{ .Type }}:    *{{ .Type | toLower }},
		client: client,
	}, nil
}

// List{{ .Type }}s lists all {{ .Type | toLower}}s in a namespace.
func List{{.Type}}s(client client.Client, namespace string) ([]{{ .Type }}, error) {
	options := metav1.ListOptions{}

	list, err := client.Kubernetes.
		{{ .API }}().
		{{ .Type }}s(namespace).
		List(options)
	if err != nil {
		return nil, err
	}

	{{ .Type | toLower }}s := make([]{{ .Type }}, 0, len(list.Items))

	for _, item := range list.Items {
		{{ .Type | toLower }}s = append({{ .Type | toLower }}s, {{ .Type }}{
			{{ .Type }}:    item,
			client: client,
		})
	}

	return {{ .Type | toLower }}s, nil
}

// Delete deletes a {{ .Type }} from the Kubernetes cluster.
func ({{ .Type | toLower }} {{ .Type }}) Delete() error {
	options := metav1.DeleteOptions{}

	return {{ .Type | toLower }}.client.Kubernetes.
		{{ .API }}().
		{{ .Type }}s({{ .Type | toLower }}.Namespace).
		Delete({{ .Type | toLower }}.Name, &options)
}
`

type Parameters struct {
	API  string
	Type string
}

func main() {
	var parameters Parameters

	flag.StringVar(&parameters.API, "api", "", "kubernetes API")
	flag.StringVar(&parameters.Type, "type", "", "type to generate")

	flag.Parse()

	funcMap := template.FuncMap{
		"toLower": strings.ToLower,
	}

	tmpl, err := template.New("stub").Funcs(funcMap).Parse(stubTemplate)
	if err != nil {
		panic(err)
	}

	outputName := fmt.Sprintf("%s.generated.go", strings.ToLower(parameters.Type))

	output, err := os.Create(outputName)
	if err != nil {
		panic(err)
	}

	defer func() {
		if err := output.Close(); err != nil {
			panic(err)
		}
	}()

	if err := tmpl.Execute(output, parameters); err != nil {
		panic(err)
	}
}
